@using CommunityHub.Core.Dtos
@model List<UserInfoDto>

@{
    ViewData["Title"] = "ANZ Havyaka Family Directory";

    // Ensure users is not null before using it
    var users = ViewBag.Users as List<UserInfoDto> ?? new List<UserInfoDto>();
    var pageSize = 10; // Number of items per page
    var totalPages = (int)Math.Ceiling(users.Count / (double)pageSize);
}

<style>
    .table {
        margin: 75px auto; /* Centers the table */
        width: 90%; /* Adjust width as needed */
    }

    /* Style for Pagination Controls */
    .pagination {
        display: flex;
        justify-content: center;
        margin-top: 20px;
    }

        .pagination .page-item {
            margin: 0 5px;
        }

            .pagination .page-item a {
                padding: 5px 10px;
                text-decoration: none;
                cursor: pointer;
            }
    /* Hide rows not on the current page */
    .page-row {
        display: none;
    }
</style>

<h2 class="text-center">ANZ Havyaka Directory</h2>

<!-- Table for displaying user data -->
<table class="table table-striped table-bordered" id="users-table">
    <thead>
        <tr>
            <th rowspan="2">No.</th>
            <th colspan="4">Member Info</th>
            <th colspan="4">Spouse Info</th>
            <th rowspan="2">Kids</th>
        </tr>
        <tr>
            <th>Name</th>
            <th>Contact Info</th>
            <th>Location</th>
            <th>Native</th>
            <th>Name</th>
            <th>Contact Info</th>
            <th>Location</th>
            <th>Native</th>
        </tr>
    </thead>
    <tbody>
        @for (var i = 0; i < users.Count; i++)
        {
            <tr class="page-row page-@((i / pageSize) + 1)">
                <td>@(i + 1)</td>
                <td>@users[i].FullName</td>
                <td>@users[i].Email <br>@string.Concat(users[i].CountryCode, "-", users[i].ContactNumber)</td>
                <td>@users[i].Location</td>
                <td>@users[i].HomeTown</td>
                @if (users[i].SpouseInfo == null)
                {
                    <td class="not-applicable">-</td>
                    <td class="not-applicable">-</td>
                    <td class="not-applicable">-</td>
                }
                else
                {
                    <td>@users[i].SpouseInfo.FullName</td>
                    <td>@users[i].SpouseInfo.Email <br>@string.Concat(users[i].SpouseInfo.CountryCode, "-", users[i].SpouseInfo.ContactNumber)</td>
                    <td>@users[i].SpouseInfo.Location</td>
                    <td>@users[i].SpouseInfo.HomeTown</td>
                }


                @if (users[i].Children.Any())
                {
                    <td>
                            @for (int j = 0; j < users[i].Children.Count; j++)
                            {
                            <div>@users[i].Children[j].Name</div>
                                @if (j < users[i].Children.Count - 1)
                                {
                                <hr style="margin: 5px 0; border-top: 1px solid #ccc;" />
                                }
                            }
                    </td>
                }
                else
                {
                    <td class="not-applicable">-</td>
                }
            </tr>
        }
    </tbody>
</table>

<!-- Pagination Controls -->
<div class="pagination">
    <!-- Page Number Buttons -->
    @for (var i = 1; i <= totalPages; i++)
    {
        <a href="javascript:void(0);" class="page-item" onclick="showPage(@i)">@i</a>
    }
</div>

<script>
    // Function to show the relevant page
    function showPage(pageNumber) {
        var rows = document.querySelectorAll('.page-row');
        rows.forEach(function (row) {
            row.style.display = 'none';  // Hide all rows
        });

        // Show only the rows for the selected page
        var pageRows = document.querySelectorAll('.page-' + pageNumber);
        pageRows.forEach(function (row) {
            row.style.display = 'table-row';  // Show rows for the current page
        });
    }

    // Initialize the first page as visible
    showPage(1);
</script>
